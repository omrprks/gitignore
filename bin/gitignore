#!/usr/bin/env ruby

Dir["#{File.dirname(__FILE__)}/../lib/*.rb"].each do |_|
	require "#{File.dirname(_)}/#{File.basename(_, File.extname(_))}"
end

require "open-uri"
require "getoptlong"

$out = ".gitignore"
$overwrite = false
$USAGE =
"Usage: gitignore [OPTION] args
Generate .gitignore file using gitignore.io API.

Output will be appended if .gitignore file exists in current directory.

options:
	-o, --out	output filename (default: \".gitignore\")
	    --overwrite	overwrite current .gitignore file (if exists)
		--show	output .gitignore file in current directory (if exists)
	-V, --version	output version information
	    --help	displays this help (\"-h\" for short message)

	args:
		.gitignore profiles (ex: Ruby, Rails, C, C++)
	example:
		$ gitignore Ruby Rails VisualStudioCode"

$opts = GetoptLong.new(
	["--help", GetoptLong::NO_ARGUMENT],
	["--version", "-V", GetoptLong::NO_ARGUMENT],
	["--list", GetoptLong::NO_ARGUMENT],
	["--show", GetoptLong::NO_ARGUMENT],
	["--out", "-o", GetoptLong::REQUIRED_ARGUMENT],
	["--overwrite", GetoptLong::NO_ARGUMENT],
)

$opts.each do |opt, arg|
	case opt
		when "--help"
			puts "#{$USAGE}"
			exit 1
		when '--version'
			puts "gitignore"
			exit 1
		when '--list'
			Gitignore::list
			exit 1
		when '--show'
			Gitignore::show($out)
			exit 1
		when "--out"; $out = arg.chomp.to_s
		when "--overwrite"; $overwrite = true
	end
end

unless ARGV.length > 0
	puts "No Input".red, "#{$USAGE}"
	exit 1
else
	File.open($out, ($overwrite ? "w" : "a") + "b")
		.write(open(Gitignore::url + ARGV.map! { |_| _.strip }.sort.uniq.join(',')).read)
	puts "Done: #{$out}".green
end
